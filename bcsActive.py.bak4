#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Aug 03, 2018 06:04:12 PM

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import bcsActive_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    bcsActive_support.set_Tk_var()
    top = BCS_Cordination_Email_Generator (root)
    bcsActive_support.init(root, top)
    root.mainloop()

w = None
def create_BCS_Cordination_Email_Generator(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    bcsActive_support.set_Tk_var()
    top = BCS_Cordination_Email_Generator (w)
    bcsActive_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_BCS_Cordination_Email_Generator():
    global w
    w.destroy()
    w = None


class BCS_Cordination_Email_Generator:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font9 = "-family {Segoe UI} -size 9 -weight bold -slant roman "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1024x828+339+128")
        top.title("BCS Cordination Email Generator")
        top.configure(background="#d8d8d8")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.TFrame1 = ttk.Frame(top)
        self.TFrame1.place(relx=0.01, rely=0.02, relheight=0.26, relwidth=0.98)
        self.TFrame1.configure(relief=GROOVE)
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief=GROOVE)
        self.TFrame1.configure(width=1005)

        self.TLabel1 = ttk.Label(self.TFrame1)
        self.TLabel1.place(relx=0.01, rely=0.05, height=24, width=86)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font=font9)
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(text='''Message # :''')

        self.TLabel2 = ttk.Label(self.TFrame1)
        self.TLabel2.place(relx=0.31, rely=0.05, height=24, width=80)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font=font9)
        self.TLabel2.configure(relief=FLAT)
        self.TLabel2.configure(text='''Customer :''')

        self.TLabel3 = ttk.Label(self.TFrame1)
        self.TLabel3.place(relx=0.64, rely=0.05, height=24, width=101)
        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font=font9)
        self.TLabel3.configure(relief=FLAT)
        self.TLabel3.configure(text='''Boeing Focal :''')

        self.mNumber = ttk.Entry(self.TFrame1)
        self.mNumber.place(relx=0.1, rely=0.05, relheight=0.12, relwidth=0.2)
        self.mNumber.configure(textvariable=bcsActive_support.mNumber)
        self.mNumber.configure(takefocus="")
        self.mNumber.configure(cursor="ibeam")
        self.mNumber.bind('<Enter>',lambda e:bcsActive_support.mNumber(e))

        self.customer = ttk.Entry(self.TFrame1)
        self.customer.place(relx=0.39, rely=0.05, relheight=0.12, relwidth=0.24)
        self.customer.configure(takefocus="")
        self.customer.configure(cursor="ibeam")
        self.customer.bind('<Enter>',lambda e:bcsActive_support.customer(e))

        self.bFocal = ttk.Entry(self.TFrame1)
        self.bFocal.place(relx=0.75, rely=0.05, relheight=0.12, relwidth=0.23)
        self.bFocal.configure(textvariable=bcsActive_support.bFocal)
        self.bFocal.configure(takefocus="")
        self.bFocal.configure(cursor="ibeam")
        self.bFocal.bind('<Enter>',lambda e:bcsActive_support.bFocal(e))

        self.TLabel4 = ttk.Label(self.TFrame1)
        self.TLabel4.place(relx=0.01, rely=0.23, height=24, width=100)
        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font=font9)
        self.TLabel4.configure(relief=FLAT)
        self.TLabel4.configure(text='''Product Line :''')

        self.TLabel5 = ttk.Label(self.TFrame1)
        self.TLabel5.place(relx=0.31, rely=0.23, height=24, width=105)
        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(font=font9)
        self.TLabel5.configure(relief=FLAT)
        self.TLabel5.configure(text='''Product Type :''')

        self.TLabel6 = ttk.Label(self.TFrame1)
        self.TLabel6.place(relx=0.64, rely=0.23, height=24, width=67)
        self.TLabel6.configure(background="#d9d9d9")
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(font=font9)
        self.TLabel6.configure(relief=FLAT)
        self.TLabel6.configure(text='''Product :''')

        self.TLabel7 = ttk.Label(self.TFrame1)
        self.TLabel7.place(relx=0.01, rely=0.42, height=24, width=63)
        self.TLabel7.configure(background="#d9d9d9")
        self.TLabel7.configure(foreground="#000000")
        self.TLabel7.configure(font=font9)
        self.TLabel7.configure(relief=FLAT)
        self.TLabel7.configure(text='''Subject :''')

        self.TLabel8 = ttk.Label(self.TFrame1)
        self.TLabel8.place(relx=0.01, rely=0.6, height=24, width=102)
        self.TLabel8.configure(background="#d9d9d9")
        self.TLabel8.configure(foreground="#000000")
        self.TLabel8.configure(font=font9)
        self.TLabel8.configure(relief=FLAT)
        self.TLabel8.configure(text='''Messge Date :''')

        self.TLabel9 = ttk.Label(self.TFrame1)
        self.TLabel9.place(relx=0.23, rely=0.6, height=24, width=112)
        self.TLabel9.configure(background="#d9d9d9")
        self.TLabel9.configure(foreground="#000000")
        self.TLabel9.configure(font=font9)
        self.TLabel9.configure(relief=FLAT)
        self.TLabel9.configure(text='''BCS Due Date :''')

        self.TLabel10 = ttk.Label(self.TFrame1)
        self.TLabel10.place(relx=0.46, rely=0.6, height=24, width=109)
        self.TLabel10.configure(background="#d9d9d9")
        self.TLabel10.configure(foreground="#000000")
        self.TLabel10.configure(font=font9)
        self.TLabel10.configure(relief=FLAT)
        self.TLabel10.configure(text='''FTD Due Date :''')

        self.TLabel11 = ttk.Label(self.TFrame1)
        self.TLabel11.place(relx=0.68, rely=0.6, height=24, width=77)
        self.TLabel11.configure(background="#d9d9d9")
        self.TLabel11.configure(foreground="#000000")
        self.TLabel11.configure(font=font9)
        self.TLabel11.configure(relief=FLAT)
        self.TLabel11.configure(text='''FTD Lead :''')

        self.pLine = ttk.Entry(self.TFrame1)
        self.pLine.place(relx=0.11, rely=0.23, relheight=0.12, relwidth=0.2)
        self.pLine.configure(takefocus="")
        self.pLine.configure(cursor="ibeam")

        self.TEntry5 = ttk.Entry(self.TFrame1)
        self.TEntry5.place(relx=0.42, rely=0.23, relheight=0.12, relwidth=0.21)
        self.TEntry5.configure(takefocus="")
        self.TEntry5.configure(cursor="ibeam")

        self.TEntry6 = ttk.Entry(self.TFrame1)
        self.TEntry6.place(relx=0.71, rely=0.23, relheight=0.12, relwidth=0.27)
        self.TEntry6.configure(takefocus="")
        self.TEntry6.configure(cursor="ibeam")

        self.TEntry7 = ttk.Entry(self.TFrame1)
        self.TEntry7.place(relx=0.08, rely=0.42, relheight=0.12, relwidth=0.9)
        self.TEntry7.configure(justify=CENTER)
        self.TEntry7.configure(takefocus="")
        self.TEntry7.configure(cursor="ibeam")

        self.TEntry8 = ttk.Entry(self.TFrame1)
        self.TEntry8.place(relx=0.11, rely=0.6, relheight=0.12, relwidth=0.12)
        self.TEntry8.configure(takefocus="")
        self.TEntry8.configure(cursor="ibeam")

        self.TEntry9 = ttk.Entry(self.TFrame1)
        self.TEntry9.place(relx=0.34, rely=0.6, relheight=0.12, relwidth=0.12)
        self.TEntry9.configure(takefocus="")
        self.TEntry9.configure(cursor="ibeam")

        self.TEntry10 = ttk.Entry(self.TFrame1)
        self.TEntry10.place(relx=0.57, rely=0.6, relheight=0.12, relwidth=0.11)
        self.TEntry10.configure(takefocus="")
        self.TEntry10.configure(cursor="ibeam")

        self.TEntry11 = ttk.Entry(self.TFrame1)
        self.TEntry11.place(relx=0.76, rely=0.6, relheight=0.12, relwidth=0.22)
        self.TEntry11.configure(takefocus="")
        self.TEntry11.configure(cursor="ibeam")

        self.TLabel12 = ttk.Label(self.TFrame1)
        self.TLabel12.place(relx=0.01, rely=0.79, height=24, width=119)
        self.TLabel12.configure(background="#d9d9d9")
        self.TLabel12.configure(foreground="#000000")
        self.TLabel12.configure(font=font9)
        self.TLabel12.configure(relief=FLAT)
        self.TLabel12.configure(text='''Assigned Team :''')

        self.TLabel13 = ttk.Label(self.TFrame1)
        self.TLabel13.place(relx=0.68, rely=0.79, height=24, width=83)
        self.TLabel13.configure(background="#d9d9d9")
        self.TLabel13.configure(foreground="#000000")
        self.TLabel13.configure(font=font9)
        self.TLabel13.configure(relief=FLAT)
        self.TLabel13.configure(text='''FTD Team :''')

        self.TEntry12 = ttk.Entry(self.TFrame1)
        self.TEntry12.place(relx=0.13, rely=0.79, relheight=0.12, relwidth=0.54)
        self.TEntry12.configure(takefocus="")
        self.TEntry12.configure(cursor="ibeam")

        self.TEntry13 = ttk.Entry(self.TFrame1)
        self.TEntry13.place(relx=0.77, rely=0.79, relheight=0.12, relwidth=0.21)
        self.TEntry13.configure(takefocus="")
        self.TEntry13.configure(cursor="ibeam")

        self.TFrame2 = ttk.Frame(top)
        self.TFrame2.place(relx=0.01, rely=0.3, relheight=0.33, relwidth=0.98)
        self.TFrame2.configure(relief=GROOVE)
        self.TFrame2.configure(borderwidth="2")
        self.TFrame2.configure(relief=GROOVE)
        self.TFrame2.configure(width=1005)

        self.TLabel14 = ttk.Label(self.TFrame2)
        self.TLabel14.place(relx=0.01, rely=0.04, height=24, width=104)
        self.TLabel14.configure(background="#d9d9d9")
        self.TLabel14.configure(foreground="#000000")
        self.TLabel14.configure(font=font9)
        self.TLabel14.configure(relief=FLAT)
        self.TLabel14.configure(text='''BCS Message :''')

        self.TLabel15 = ttk.Label(self.TFrame2)
        self.TLabel15.place(relx=0.59, rely=0.04, height=24, width=111)
        self.TLabel15.configure(background="#d9d9d9")
        self.TLabel15.configure(foreground="#000000")
        self.TLabel15.configure(font=font9)
        self.TLabel15.configure(relief=FLAT)
        self.TLabel15.configure(text='''Attachements :''')

        self.TCombobox1 = ttk.Combobox(self.TFrame2)
        self.TCombobox1.place(relx=0.71, rely=0.04, relheight=0.09
                , relwidth=0.28)
        self.TCombobox1.configure(textvariable=bcsActive_support.combobox)
        self.TCombobox1.configure(takefocus="")

        self.Scrolledtext1 = ScrolledText(self.TFrame2)
        self.Scrolledtext1.place(relx=0.01, rely=0.18, relheight=0.78
                , relwidth=0.97)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap=NONE)

        self.TFrame3 = ttk.Frame(top)
        self.TFrame3.place(relx=0.01, rely=0.65, relheight=0.27, relwidth=0.98)
        self.TFrame3.configure(relief=GROOVE)
        self.TFrame3.configure(borderwidth="2")
        self.TFrame3.configure(relief=GROOVE)
        self.TFrame3.configure(width=1005)

        self.TLabel16 = ttk.Label(self.TFrame3)
        self.TLabel16.place(relx=0.01, rely=0.04, height=24, width=133)
        self.TLabel16.configure(background="#d9d9d9")
        self.TLabel16.configure(foreground="#000000")
        self.TLabel16.configure(font=font9)
        self.TLabel16.configure(relief=FLAT)
        self.TLabel16.configure(text='''STD Email Phrase :''')

        self.TCombobox2 = ttk.Combobox(self.TFrame3)
        self.TCombobox2.place(relx=0.15, rely=0.04, relheight=0.12
                , relwidth=0.83)
        self.TCombobox2.configure(textvariable=bcsActive_support.combobox)
        self.TCombobox2.configure(takefocus="")

        self.TLabel17 = ttk.Label(self.TFrame3)
        self.TLabel17.place(relx=0.01, rely=0.22, height=24, width=96)
        self.TLabel17.configure(background="#d9d9d9")
        self.TLabel17.configure(foreground="#000000")
        self.TLabel17.configure(font=font9)
        self.TLabel17.configure(relief=FLAT)
        self.TLabel17.configure(text='''Email Editor :''')

        self.Scrolledtext2 = ScrolledText(self.TFrame3)
        self.Scrolledtext2.place(relx=0.15, rely=0.27, relheight=0.68
                , relwidth=0.83)
        self.Scrolledtext2.configure(background="white")
        self.Scrolledtext2.configure(font="TkTextFont")
        self.Scrolledtext2.configure(foreground="black")
        self.Scrolledtext2.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext2.configure(highlightcolor="black")
        self.Scrolledtext2.configure(insertbackground="black")
        self.Scrolledtext2.configure(insertborderwidth="3")
        self.Scrolledtext2.configure(selectbackground="#c4c4c4")
        self.Scrolledtext2.configure(selectforeground="black")
        self.Scrolledtext2.configure(width=10)
        self.Scrolledtext2.configure(wrap=NONE)

        self.TButton1 = ttk.Button(top)
        self.TButton1.place(relx=0.46, rely=0.94, height=30, width=128)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Create Email''')

        self.TButton2 = ttk.Button(top)
        self.TButton2.place(relx=0.92, rely=0.94, height=30, width=78)
        self.TButton2.configure(takefocus="")
        self.TButton2.configure(text='''Exit''')

        self.TButton3 = ttk.Button(top)
        self.TButton3.place(relx=0.01, rely=0.94, height=30, width=78)
        self.TButton3.configure(takefocus="")
        self.TButton3.configure(text='''Save''')





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



